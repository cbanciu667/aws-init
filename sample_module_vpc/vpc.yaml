AWSTemplateFormatVersion: '2010-09-09'
Description: Vpc base template with 3 AZs, 2 layer subnets, and one NAT/VPN instance
Parameters:
  ProjectName:
    Description: Project name
    Type: String
  ModuleName:
    Description: Module name
    Type: String    
  StageName:
    Description: Stage name
    Type: String

Conditions:
  StageIsProd: !Equals
    - !Ref 'StageName'
    - 'prod'

Resources:
# Custom resources
  VpcCidrCustomResource:
    Type: "Custom::SmDomain"
    Properties:
      ServiceToken: 
        Fn::ImportValue:
          !Sub "${ProjectName}-SMR-lambda-SmrArn"
      secretname: !Ref ProjectName
      secretvalue: !Sub 'vpc-cidr-${StageName}'
  DomainCustomResource:
    Type: "Custom::SmDomain"
    Properties:
      ServiceToken: 
        Fn::ImportValue:
          !Sub "${ProjectName}-SMR-lambda-SmrArn"
      secretname: !Ref ProjectName
      secretvalue: 'route53-domain-name'      
# VPC core resources
  dhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS
# VPC core resources
  DhcpOptionsAssoc:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref dhcpOptions
      VpcId: !Ref Vpc
# VPC core resources
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !GetAtt VpcCidrCustomResource.Response
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName} 
# VPC core resources
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}
# VPC core resources
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId: !Ref InternetGateway
# VPC core resources
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [0, !Cidr [ !GetAtt VpcCidrCustomResource.Response, 16, 8 ] ]
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}
# VPC core resources
  PublicSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [1, !Cidr [ !GetAtt VpcCidrCustomResource.Response, 16, 8 ] ]
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}
# VPC core resources
  PublicSubnet1C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [2, !Cidr [ !GetAtt VpcCidrCustomResource.Response, 16, 8 ] ]
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}
# VPC core resources
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  PublicRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet1BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1B
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet1CRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1C
      RouteTableId: !Ref PublicRouteTable
  
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  InboundPublicNetworkAclDefault:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '1000'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPublicNetworkAclDefault:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '1000'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  PublicSubnet1ANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet1BNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1B
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet1CNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1C
      NetworkAclId: !Ref PublicNetworkAcl
# VPC core resources
  PrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [3, !Cidr [ !GetAtt VpcCidrCustomResource.Response, 16, 8 ] ]
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  PrivateSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [4, !Cidr [ !GetAtt VpcCidrCustomResource.Response, 16, 8 ] ]
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  PrivateSubnet1C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [5, !Cidr [ !GetAtt VpcCidrCustomResource.Response, 16, 8 ] ]
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}          

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  PrivateDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VpnNatInstance

  PrivateDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VpnNatInstance

  PrivateDefaultRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VpnNatInstance

  PrivateSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnet1BRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1B
      RouteTableId: !Ref PrivateRouteTableB

  PrivateSubnet1CRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1C
      RouteTableId: !Ref PrivateRouteTableC

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  InboundPrivateNetworkAclDefault:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '1000'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutBoundPrivateNetworkAclDefault:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '1000'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  PrivateSubnet1ANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet1BNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1B
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet1CNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1C
      NetworkAclId: !Ref PrivateNetworkAcl
# VPC core resources
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - Ref: PrivateRouteTableA
        - Ref: PrivateRouteTableB
        - Ref: PrivateRouteTableC
        - Ref: PublicRouteTable
      ServiceName:
        Fn::Join:
          - ''
          - - com.amazonaws.
            - Ref: AWS::Region
            - .s3
      VpcId:
        Ref: Vpc
# VPC core resources
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - Ref: PrivateRouteTableA
        - Ref: PrivateRouteTableB
        - Ref: PrivateRouteTableC
        - Ref: PublicRouteTable
      ServiceName:
        Fn::Join:
          - ''
          - - com.amazonaws.
            - Ref: AWS::Region
            - .s3
      VpcId: !Ref Vpc

  DynamoDbEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - Ref: PrivateRouteTableA
        - Ref: PrivateRouteTableB
        - Ref: PrivateRouteTableC
        - Ref: PublicRouteTable
      ServiceName:
        Fn::Join:
          - ''
          - - com.amazonaws.
            - Ref: AWS::Region
            - .dynamodb
      VpcId: !Ref Vpc

  VpcS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
# VpnNat instance resources
  VpnNatInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Sub "{{resolve:secretsmanager:${ProjectName}:SecretString:vpc-vpn-nat-type-${StageName}}}"
      KeyName: !Sub "{{resolve:secretsmanager:${ProjectName}:SecretString:vpc-ssh-key-${StageName}}}"
      SubnetId: !Ref PublicSubnet1A
      SourceDestCheck: 'false'
      ImageId: !Sub "{{resolve:secretsmanager:${ProjectName}:SecretString:vpc-vpn-nat-ami}}"
      SecurityGroupIds:
        - Ref: commonOverride
        - Ref: common
        - Ref: nat
        - Ref: vpn
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/sh
            echo 1 > /proc/sys/net/ipv4/ip_forward
            echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
            /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
            /sbin/iptables-save > /etc/sysconfig/iptables
            mkdir -p /etc/sysctl.d/
            cat <<EOF > /etc/sysctl.d/nat.conf
            net.ipv4.ip_forward = 1
            net.ipv4.conf.eth0.send_redirects = 0
            hostnamectl set-hostname vpnnat.${StageName}.{{resolve:secretsmanager:${ProjectName}:SecretString:route53-domain-name}}
            echo `curl http://169.254.169.254/latest/meta-data/local-ipv4` vpnnat.${StageName}.{{resolve:secretsmanager:${ProjectName}:SecretString:route53-domain-name}} >> /etc/hosts
            reboot
            EOF
      Tags: 
        - Key: 'Name'
          Value: !If
            - StageIsProd
            - !Sub
              - vpnnat.${Domain}
              - { Domain: !GetAtt DomainCustomResource.Response }
            - !Sub
              - vpnnat.${StageName}.${Domain}
              - { Domain: !GetAtt DomainCustomResource.Response }      
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}
# VpnNat instance resources
  VPNNatEIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref VpnNatInstance
# VpnNat instance resources
  VPNNatDNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: VpnNatInstance
    Properties:
      Comment: DNS name for my VPN/NAT instance.
      HostedZoneName: !If
        - StageIsProd
        - !Sub
          - ${Domain}.
          - { Domain: !GetAtt DomainCustomResource.Response }
        - !Sub
          - ${StageName}.${Domain}.
          - { Domain: !GetAtt DomainCustomResource.Response }
      Name: !If
        - StageIsProd
        - !Sub
          - vpnnat.${Domain}
          - { Domain: !GetAtt DomainCustomResource.Response }
        - !Sub
          - vpnnat.${StageName}.${Domain}
          - { Domain: !GetAtt DomainCustomResource.Response }
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt VpnNatInstance.PublicIp
# SGs
  nat:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable internal access to the NAT device
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - !Ref ProjectName
                - !Ref StageName
                - nat      
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId:
            Ref: common
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
# SGs          
  commonOverride:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Common security group used for global overrides
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - !Ref ProjectName
                - !Ref StageName
                - commonOverride
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}                
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Home
          FromPort: '22'
          ToPort: '22'
          CidrIp: 88.77.100.100/32
# SGs
  common:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Common environment settings
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - !Ref ProjectName
                - !Ref StageName
                - common
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}   
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId:
            Ref: vpn

  vpn:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: OpenVPN servers
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - - !Ref ProjectName
                - !Ref StageName
                - vpn
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}   
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

Outputs:
  Vpc:
    Description: Vpc ID
    Value: !Ref Vpc
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-Vpc
  PrivateSubnet1A:
    Description: PrivateSubnet1A
    Value: !Ref PrivateSubnet1A
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1A
  PrivateSubnet1B:
    Description: PrivateSubnet1B
    Value: !Ref PrivateSubnet1B
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1B
  PrivateSubnet1C:
    Description: PrivateSubnet1C
    Value: !Ref PrivateSubnet1C
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1C
  PublicSubnet1A:
    Description: PublicSubnet1A
    Value: !Ref PublicSubnet1A
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1A
  PublicSubnet1B:
    Description: PublicSubnet1B
    Value: !Ref PublicSubnet1B
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1B
  PublicSubnet1C:
    Description: PublicSubnet1C
    Value: !Ref PublicSubnet1C
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1C
  PrivateRouteTableA:
    Description: PrivateRouteTableA ID
    Value: !Ref PrivateRouteTableA
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateRouteTableA
  PrivateRouteTableB:
    Description: PrivateRouteTableB ID
    Value: !Ref PrivateRouteTableB
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateRouteTableB
  PrivateRouteTableC:
    Description: PrivateRouteTableC ID
    Value: !Ref PrivateRouteTableC
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateRouteTableC
  PublicRouteTable:
    Description: PublicRouteTable ID
    Value: !Ref PublicRouteTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicRouteTable
  common:
    Description: common security group ID
    Value:
      Fn::GetAtt:
        - common
        - GroupId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-common  
  commonOverride:
    Description: env security env ID
    Value:
      Fn::GetAtt:
        - commonOverride
        - GroupId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-env
  vpn:
    Description: vpn security group ID
    Value:
      Fn::GetAtt:
        - vpn
        - GroupId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-vpn