AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Stack containing static website combined with lambda, api gateway and dynamodb

Parameters:
  ProjectName:
    Description: Project name
    Type: String
  ModuleName:
    Description: Module name
    Type: String    
  StageName:
    Description: Stage name
    Type: String

Conditions:
  StageIsProd: !Equals
    - !Ref 'StageName'
    - 'prod'

Globals:
  Function:
    Timeout: 3

Mappings:
  RegionMap:
    ap-northeast-1:
      S3hostedzoneID: "Z2M4EHUR26P7ZW"
      websiteendpoint: "s3-website-ap-northeast-1.amazonaws.com"
    ap-northeast-2:
      S3hostedzoneID: "Z3W03O7B5YMIYP"
      websiteendpoint: "s3-website.ap-northeast-2.amazonaws.com"
    ap-south-1:
      S3hostedzoneID: "Z11RGJOFQNVJUP"
      websiteendpoint: "s3-website.ap-south-1.amazonaws.com"
    ap-southeast-1:
      S3hostedzoneID: "Z3O0J2DXBE1FTB"
      websiteendpoint: "s3-website-ap-southeast-1.amazonaws.com"
    ap-southeast-2:
      S3hostedzoneID: "Z1WCIGYICN2BYD"
      websiteendpoint: "s3-website-ap-southeast-2.amazonaws.com"
    eu-central-1:
      S3hostedzoneID: "Z21DNDUVLTQW6Q"
      websiteendpoint: "s3-website.eu-central-1.amazonaws.com"
    eu-west-1:
      S3hostedzoneID: "Z1BKCTXD74EZPE"
      websiteendpoint: "s3-website-eu-west-1.amazonaws.com"
    sa-east-1:
      S3hostedzoneID: "Z7KQH4QJS55SO"
      websiteendpoint: "s3-website-sa-east-1.amazonaws.com"
    us-east-1:
      S3hostedzoneID: "Z3AQBSTGFYJSTF"
      websiteendpoint: "s3-website-us-east-1.amazonaws.com"
    us-east-2:
      S3hostedzoneID: "Z2O1EMRO9K5GLX"
      websiteendpoint: "s3-website.us-east-2.amazonaws.com"
    us-west-1:
      S3hostedzoneID: "Z2F56UZL2M1ACD"
      websiteendpoint: "s3-website-us-west-1.amazonaws.com"
    us-west-2:
      S3hostedzoneID: "Z3BJ6K6RIION7M"
      websiteendpoint: "s3-website-us-west-2.amazonaws.com"

Resources:
# Custom resources for Secrets Manager Pooling
  Route53Domain:
    Type: "Custom::SmDomain"
    Properties:
      ServiceToken: 
        Fn::ImportValue:
          !Sub "${ProjectName}-SMR-lambda-SmrArn"
      secretname: !Ref ProjectName
      secretvalue: 'route53-domain-name'

  CloudFrontcertificateArn:
    Type: "Custom::CloudFrontcertificateArn"
    Properties:
      ServiceToken: 
        Fn::ImportValue:
          !Sub "${ProjectName}-SMR-lambda-SmrArn"
      secretname: !Ref ProjectName
      secretvalue: !Sub "website-cloudfront-cer-${StageName}"
# Website resources
  WebsiteLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_code/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        WebsiteNetApi:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  PublicWebsiteS3BucketLogs:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        AccessControl: LogDeliveryWrite
           
  PublicWebsiteS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain    
    Properties:
      AccessControl: PublicRead
      LoggingConfiguration:
        DestinationBucketName: !Ref PublicWebsiteS3BucketLogs
        LogFilePrefix: 'cdn/'      
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      Tags: 
        - Key: 'scope'
          Value: !Ref ProjectName
        - Key: 'module'
          Value: !Ref ModuleName
        - Key: 'stage'
          Value: !Ref StageName
        - Key: 'security'
          Value: !Sub ${ProjectName}-${ModuleName}-${StageName}

  PublicS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicWebsiteS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 's3:GetObject'
            Principal: '*'
            Resource: !Sub '${PublicWebsiteS3Bucket.Arn}/*'    

# Project wide wildcard certificate       
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If
            - StageIsProd
            - !GetAtt Route53Domain.Response
            - !Sub
              - ${StageName}.${Domain}
              - { Domain: !GetAtt Route53Domain.Response }
          - !If
            - StageIsProd
            - !Sub
              - www.${Domain}
              - { Domain: !GetAtt Route53Domain.Response }
            - !Sub
              - www.${StageName}.${Domain}
              - { Domain: !GetAtt Route53Domain.Response }
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: true
          MaxTTL: 31536000
          SmoothStreaming: false
          TargetOriginId: !Sub ${ProjectName}-${ModuleName}-${StageName}-website
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt PublicWebsiteS3BucketLogs.DomainName
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: 'https-only'
              OriginReadTimeout: 30
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            DomainName: !GetAtt PublicWebsiteS3Bucket.DomainName
            Id: !Sub ${ProjectName}-${ModuleName}-${StageName}-website
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !GetAtt CloudFrontcertificateArn.Response
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !If
        - StageIsProd
        - Fn::ImportValue: aws-dns-HostedZone
        - Fn::ImportValue: 
            !Sub aws-${StageName}-dns-HostedZone
      RecordSets:
      - Name: !If
        - StageIsProd
        - !GetAtt Route53Domain.Response
        - !Sub
          - ${StageName}.${Domain}
          - { Domain: !GetAtt Route53Domain.Response }
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2
      - Name: !If
        - StageIsProd
        - !Sub
          - www.${Domain}
          - { Domain: !GetAtt Route53Domain.Response }
        - !Sub
          - www.${StageName}.${Domain}
          - { Domain: !GetAtt Route53Domain.Response }
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  WebsiteNetLambda:
    Description: 'Lambda Function for the website'
    Value: !GetAtt WebsiteLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-public-website-lambda
  WebsiteS3Bucket:
    Description: 'S3 bucket for the website'
    Value: !Ref PublicWebsiteS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-public-website-bucket